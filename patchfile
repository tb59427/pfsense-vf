--- /usr/local/www/services_captiveportal.php.orig	2016-07-19 17:33:15.000000000 +0200
+++ /usr/local/www/services_captiveportal.php	2016-12-12 18:14:52.000000000 +0100
@@ -223,6 +223,11 @@
 	$pconfig['radmac_format'] = $a_cp[$cpzone]['radmac_format'];
 	$pconfig['reverseacct'] = isset($a_cp[$cpzone]['reverseacct']);
 	$pconfig['radiusnasid'] = $a_cp[$cpzone]['radiusnasid'];
+	/* Get vereinsflieger Authentication information
+	*/
+  $pconfig['vfauth_priv'] = isset($a_cp[$cpzone]['vfauth_priv']);
+	$pconfig['vfauth_cid'] = $a_cp[$cpzone]['vfauth_cid'];
+
 	$pconfig['page'] = array();
 	if ($a_cp[$cpzone]['page']['htmltext']) {
 		$pconfig['page']['htmltext'] = $a_cp[$cpzone]['page']['htmltext'];
@@ -463,6 +468,8 @@
 		$newcp['radmac_format'] = $_POST['radmac_format'] ? $_POST['radmac_format'] : false;
 		$newcp['reverseacct'] = $_POST['reverseacct'] ? true : false;
 		$newcp['radiusnasid'] = trim($_POST['radiusnasid']);
+    $newcp['vfauth_priv'] = $_POST['vfauth_priv'] ? true : false;
+		$newcp['vfauth_cid'] = $_POST['vfauth_cid'];
 
 		if (!is_array($newcp['page'])) {
 			$newcp['page'] = array();
@@ -754,7 +761,6 @@
 ))->displayasRadio();
 
 $section->add($group);
-
 $section->addInput(new Form_Checkbox(
 	'localauth_priv',
 	null,
@@ -762,8 +768,31 @@
 	$pconfig['localauth_priv']
 ));
 
+/*
+ * still awkward this - need to better understand the way they construct UI dialogs
+*/
+
+$section->addInput(new Form_Checkbox(
+    'vfauth_priv',
+    null,
+    'vereinsflieger Authentication',
+    $pconfig['vfauth_priv']
+))->setHelp('Try Vereinsflieger if local authentication fails');
+
+$section->addInput(new Form_Input(
+	'vfauth_cid',
+	null,
+	'text',
+	$pconfig['vfauth_cid']
+))->setHelp('Your <a href="https://www.vereinsflieger.de/member/admin/community.php">Vereinsflieger Club-ID</a>. Enter 0 if membership in any Club using vereinsflieger is sufficient for login');
+
+
+/*
+* end of awkward add ons to captive portal configuration
+*/
+
 $group = new Form_Group('RADIUS protocol');
-$group->addClass("radiusproto");
+$group->addClass('radiusproto');
 
 $group->add(new Form_Checkbox(
 	'radius_protocol',
@@ -1240,6 +1269,9 @@
 
 		disableInput('localauth_priv', !($('input[name="auth_method"]:checked').val() == 'local'));
 		hideCheckbox('localauth_priv', !($('input[name="auth_method"]:checked').val() == 'local'));
+		disableInput('vfauth_cid', !($('input[name="auth_method"]:checked').val() == 'local'));
+	  hideInput('vfauth_cid', !hide);
+		hideCheckbox('vfauth_priv', !($('input[name="auth_method"]:checked').val() == 'local'));
 		hideClass("radiusproto", !($('input[name="auth_method"]:checked').val() == 'radius'));
 	}
 
--- /etc/inc/VereinsfliegerRestInterface.php	1970-01-01 01:00:00.000000000 +0100
+++ /etc/inc/VereinsfliegerRestInterface.php	2016-12-11 13:29:09.000000000 +0100
@@ -0,0 +1,211 @@
+<?php
+class VereinsfliegerRestInterface
+{
+	private $InterfaceUrl = 'https://www.vereinsflieger.de/interface/rest/';
+	private $AccessToken;
+	private $HttpStatusCode = 0;
+	private $aResponse = array();
+	
+	//=============================================================================================
+	// Anmelden
+	//=============================================================================================
+	public function SignIn($UserName, $Password, $Cid=0)
+	{
+		// Accesstoken holen
+		$this->SendRequest("GET", "auth/accesstoken", null);
+		if ($this->HttpStatusCode != 200 || !$this->aResponse) {
+			return false;
+		}
+		$this->AccessToken = $this->aResponse['accesstoken'];
+		//$PassWordHash = md5(md5($Password).$this->AccessToken);
+		$PassWordHash = md5($Password);
+		// Anmelden
+		$Data = array(
+			'accesstoken' => $this->AccessToken, 
+			'username' => $UserName, 
+			'password' => $PassWordHash,
+			'cid'      => $Cid);
+		$this->SendRequest("POST", "auth/signin", $Data);
+		return (($this->HttpStatusCode) == 200);
+	}
+
+	//=============================================================================================
+	// Abmelden
+	//=============================================================================================
+	public function SignOut()
+	{
+		$Data = array('accesstoken' => $this->AccessToken);
+		$this->SendRequest("DELETE", "auth/signout/".$this->AccessToken, $Data);
+		return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// GetUser
+	//=============================================================================================
+	public function GetUser()
+	{
+		$Data = array('accesstoken' => $this->AccessToken);
+		$this->SendRequest("POST", "auth/getuser", $Data);
+		if ($this->HttpStatusCode == 200) {
+			return $this->aResponse;
+		}
+		return array();
+	}
+	
+	//=============================================================================================
+	// InsertFlight
+	//=============================================================================================
+	public function InsertFlight($aFlighData)
+	{
+		$aFlighData['accesstoken'] = $this->AccessToken;
+		$this->SendRequest("POST", "flight/add", $aFlighData);
+     	return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// UpdateFlight
+	//=============================================================================================
+	public function UpdateFlight($Flid, $aFlighData)
+	{
+		$aFlighData['accesstoken'] = $this->AccessToken;
+		$this->SendRequest("PUT", "flight/edit/".intval($Flid), $aFlighData);
+		return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// DeleteFlight
+	//=============================================================================================
+	public function DeleteFlight($Flid)
+	{
+		$aFlighData['accesstoken'] = $this->AccessToken;
+		$this->SendRequest("DELETE", "flight/delete/".intval($Flid), $aFlighData);
+		return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// GetFlight
+	//=============================================================================================
+	public function GetFlight($Flid)
+	{
+		$aFlighData['accesstoken'] = $this->AccessToken;
+		$this->SendRequest("POST", "flight/get/".intval($Flid), $aFlighData);
+		return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// GetFlights_Today
+	//=============================================================================================
+	public function GetFlights_today()
+	{
+		$aData = array('accesstoken' => $this->AccessToken);
+		$this->SendRequest("POST", "flight/list/today",$aData);
+		return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// GetFlights_Date
+	//=============================================================================================
+	public function GetFlights_date($Date)
+	{
+		$aData = array(
+			'accesstoken' => $this->AccessToken,
+			'dateparam' => $Date
+			);
+		$this->SendRequest("POST", "flight/list/date",$aData);
+		return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// GetFlights_NoDate
+	//=============================================================================================
+	public function GetFlights_nodate()
+	{
+		$aData = array(
+			'accesstoken' => $this->AccessToken);
+		$this->SendRequest("POST", "flight/list/nodate",$aData);
+		return (($this->HttpStatusCode) == 200);
+	}
+	
+	//=============================================================================================
+	// GetPublicCalendar
+	//=============================================================================================
+	public function GetPublicCalendar($HpAccessCode="")
+	{
+		$aData = array(
+			'accesstoken' => $this->AccessToken,
+			'hpaccesscode' => $HpAccessCode
+			);
+		$this->SendRequest("POST", "calendar/list/public",$aData);
+		return (($this->HttpStatusCode) == 200);
+	}
+
+	//=============================================================================================
+	// GetHttpStatusCode
+	//=============================================================================================
+	public function GetHttpStatusCode()
+	{
+		return $this->HttpStatusCode;
+	}
+	//=============================================================================================
+	// GetResponse
+	//=============================================================================================
+	public function GetResponse()
+	{
+		return $this->aResponse;
+	}
+	
+	//=============================================================================================
+	// SendRequest
+	//=============================================================================================
+	private function SendRequest($Method, $Resource, $Data)
+	{
+		$InterfaceUrl = $this->InterfaceUrl.$Resource;
+		$CurlHandle = curl_init();
+		curl_setopt($CurlHandle, CURLOPT_URL, $InterfaceUrl);
+		switch($Method) {
+			case 'GET':
+				break;
+			case 'POST':
+				$Fields = http_build_query(is_array($Data) ? $Data : array(),'','&');
+				curl_setopt($CurlHandle, CURLOPT_HTTPHEADER, array('Content-Length: ' . strlen($Fields)));
+				curl_setopt($CurlHandle, CURLOPT_POST, 1);
+				curl_setopt($CurlHandle, CURLOPT_POSTFIELDS, $Fields);	
+				break;
+			case 'PUT':
+				//$Fields = http_build_query(is_array($Data) ? $Data : array());
+				$Fields = http_build_query(is_array($Data) ? $Data : array(),'','&');
+				curl_setopt($CurlHandle, CURLOPT_HTTPHEADER, array('Content-Length: ' . strlen($Fields)));
+				curl_setopt($CurlHandle, CURLOPT_CUSTOMREQUEST, 'PUT'); 
+				curl_setopt($CurlHandle, CURLOPT_POSTFIELDS, $Fields);	
+				break;
+			case 'DELETE':
+				//$Fields = http_build_query(is_array($Data) ? $Data : array());
+				$Fields = http_build_query(is_array($Data) ? $Data : array(),'','&');
+				curl_setopt($CurlHandle, CURLOPT_HTTPHEADER, array('Content-Length: ' . strlen($Fields)));
+				curl_setopt($CurlHandle, CURLOPT_CUSTOMREQUEST, 'DELETE'); 
+				curl_setopt($CurlHandle, CURLOPT_POSTFIELDS, $Fields);	
+				break;
+		}
+		curl_setopt($CurlHandle, CURLOPT_RETURNTRANSFER, 1);
+		curl_setopt($CurlHandle, CURLOPT_FOLLOWLOCATION, 1);
+		curl_setopt($CurlHandle, CURLOPT_SSL_VERIFYPEER, false);
+		$Html = curl_exec($CurlHandle);
+		$this->HttpStatusCode = curl_getinfo($CurlHandle, CURLINFO_HTTP_CODE);
+		curl_close($CurlHandle);
+		$this->aResponse = json_decode($Html, true);
+       	if (!$this->aResponse) {
+			return false;
+		}
+		return true;
+	}	
+
+	//=============================================================================================
+	// SetInterfaceUrl
+	//=============================================================================================
+	public function SetInterfaceUrl($InterfaceUrl)
+	{
+		return $this->InterfaceUrl = $InterfaceUrl;
+	}
+
+}
+?>
--- /usr/local/capitveportal/index.php	2016-12-10 12:05:04.000000000 +0100
+++ /usr/local/captiveportal/index.php.vf	2016-12-10 12:04:01.000000000 +0100
@@ -58,6 +58,7 @@
 require_once("auth.inc");
 require_once("functions.inc");
 require_once("captiveportal.inc");
+    require_once("VereinsfliegerRestInterface.php");
 
 $errormsg = "Invalid credentials specified.";
 
@@ -272,8 +273,29 @@
 			captiveportal_logportalauth($_POST['auth_user'], $clientmac, $clientip, "LOGIN");
 			portal_allow($clientip, $clientmac, $_POST['auth_user']);
 		} else {
-			captiveportal_logportalauth($_POST['auth_user'], $clientmac, $clientip, "FAILURE");
-			portal_reply_page($redirurl, "error", $errormsg);
+            /*
+            if ($cpcfg['vfauth_priv']) {
+            */
+            
+            $vfif = new VereinsfliegerRestInterface();
+            $vfresult = $vfif->SignIn($_POST['auth_user'], $_POST['auth_pass']);
+            
+            /*
+            }
+            else {
+                $vfresult = $cpcfg['vfauth_priv'];
+            }
+            */
+            
+            if (!$vfresult) {
+                captiveportal_logportalauth($_POST['auth_user'], $clientmac, $clientip, "FAILURE");
+                portal_reply_page($redirurl, "error", $errormsg);
+            }
+            else {
+                captiveportal_logportalauth($_POST['auth_user'], $clientmac, $clientip, "LOGIN");
+                portal_allow($clientip, $clientmac, $_POST['auth_user']);
+                $loginok = $vfresult;
+            }
 		}
 	} else {
 		portal_reply_page($redirurl, "error", $errormsg);
